/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.Authorization
import com.kodfarki.subscreasy.client.model.AuthorizedServicesResponse
import com.kodfarki.subscreasy.client.model.ChargingLog
import com.kodfarki.subscreasy.client.model.Deduction
import com.kodfarki.subscreasy.client.model.DeductionResult
import com.kodfarki.subscreasy.client.model.InvoiceRequest
import com.kodfarki.subscreasy.client.model.MessageTemplate
import com.kodfarki.subscreasy.client.model.ServiceInstanceResult
import com.kodfarki.subscreasy.client.model.ServiceOfferingResult
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class EndpointsApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new EndpointsApiAsyncHelper(client, config)

  /**
   * authorize
   * 
   *
   * @param authorization authorization 
   * @return Boolean
   */
  def authorizeUsingPUT(authorization: Authorization): Option[Boolean] = {
    val await = Try(Await.result(authorizeUsingPUTAsync(authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * authorize asynchronously
   * 
   *
   * @param authorization authorization 
   * @return Future(Boolean)
   */
  def authorizeUsingPUTAsync(authorization: Authorization): Future[Boolean] = {
      helper.authorizeUsingPUT(authorization)
  }

  /**
   * deduct
   * 
   *
   * @param deduction deduction 
   * @return DeductionResult
   */
  def deductUsingPUT(deduction: Deduction): Option[DeductionResult] = {
    val await = Try(Await.result(deductUsingPUTAsync(deduction), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deduct asynchronously
   * 
   *
   * @param deduction deduction 
   * @return Future(DeductionResult)
   */
  def deductUsingPUTAsync(deduction: Deduction): Future[DeductionResult] = {
      helper.deductUsingPUT(deduction)
  }

  /**
   * getAuthorizedServices
   * 
   *
   * @param secureId secureId 
   * @return AuthorizedServicesResponse
   */
  def getAuthorizedServicesUsingGET(secureId: String): Option[AuthorizedServicesResponse] = {
    val await = Try(Await.result(getAuthorizedServicesUsingGETAsync(secureId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAuthorizedServices asynchronously
   * 
   *
   * @param secureId secureId 
   * @return Future(AuthorizedServicesResponse)
   */
  def getAuthorizedServicesUsingGETAsync(secureId: String): Future[AuthorizedServicesResponse] = {
      helper.getAuthorizedServicesUsingGET(secureId)
  }

  /**
   * getChargingLogBySubscription
   * 
   *
   * @param id id 
   * @return List[ChargingLog]
   */
  def getChargingLogBySubscriptionUsingGET(id: Long): Option[List[ChargingLog]] = {
    val await = Try(Await.result(getChargingLogBySubscriptionUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getChargingLogBySubscription asynchronously
   * 
   *
   * @param id id 
   * @return Future(List[ChargingLog])
   */
  def getChargingLogBySubscriptionUsingGETAsync(id: Long): Future[List[ChargingLog]] = {
      helper.getChargingLogBySubscriptionUsingGET(id)
  }

  /**
   * getCustomerTotalAmount
   * 
   *
   * @param id id 
   * @return Long
   */
  def getCustomerTotalAmountUsingGET(id: String): Option[Long] = {
    val await = Try(Await.result(getCustomerTotalAmountUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getCustomerTotalAmount asynchronously
   * 
   *
   * @param id id 
   * @return Future(Long)
   */
  def getCustomerTotalAmountUsingGETAsync(id: String): Future[Long] = {
      helper.getCustomerTotalAmountUsingGET(id)
  }

  /**
   * getInvoiceDetails
   * 
   *
   * @param invoiceRequest invoiceRequest 
   * @return Any
   */
  def getInvoiceDetailsUsingGET(invoiceRequest: InvoiceRequest): Option[Any] = {
    val await = Try(Await.result(getInvoiceDetailsUsingGETAsync(invoiceRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getInvoiceDetails asynchronously
   * 
   *
   * @param invoiceRequest invoiceRequest 
   * @return Future(Any)
   */
  def getInvoiceDetailsUsingGETAsync(invoiceRequest: InvoiceRequest): Future[Any] = {
      helper.getInvoiceDetailsUsingGET(invoiceRequest)
  }

  /**
   * getMessageTemplate
   * 
   *
   * @param lifecycleEventName lifecycleEventName 
   * @return MessageTemplate
   */
  def getMessageTemplateUsingGET(lifecycleEventName: String): Option[MessageTemplate] = {
    val await = Try(Await.result(getMessageTemplateUsingGETAsync(lifecycleEventName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getMessageTemplate asynchronously
   * 
   *
   * @param lifecycleEventName lifecycleEventName 
   * @return Future(MessageTemplate)
   */
  def getMessageTemplateUsingGETAsync(lifecycleEventName: String): Future[MessageTemplate] = {
      helper.getMessageTemplateUsingGET(lifecycleEventName)
  }

  /**
   * getServiceInstancesBySubscription
   * 
   *
   * @param id id 
   * @return List[ServiceInstanceResult]
   */
  def getServiceInstancesBySubscriptionUsingGET(id: Long): Option[List[ServiceInstanceResult]] = {
    val await = Try(Await.result(getServiceInstancesBySubscriptionUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getServiceInstancesBySubscription asynchronously
   * 
   *
   * @param id id 
   * @return Future(List[ServiceInstanceResult])
   */
  def getServiceInstancesBySubscriptionUsingGETAsync(id: Long): Future[List[ServiceInstanceResult]] = {
      helper.getServiceInstancesBySubscriptionUsingGET(id)
  }

  /**
   * getServiceOfferingsBySubscriptionPlan
   * 
   *
   * @param id id 
   * @return List[ServiceOfferingResult]
   */
  def getServiceOfferingsBySubscriptionPlanUsingGET(id: Long): Option[List[ServiceOfferingResult]] = {
    val await = Try(Await.result(getServiceOfferingsBySubscriptionPlanUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getServiceOfferingsBySubscriptionPlan asynchronously
   * 
   *
   * @param id id 
   * @return Future(List[ServiceOfferingResult])
   */
  def getServiceOfferingsBySubscriptionPlanUsingGETAsync(id: Long): Future[List[ServiceOfferingResult]] = {
      helper.getServiceOfferingsBySubscriptionPlanUsingGET(id)
  }

  /**
   * getTotalRevenuePerMonth
   * 
   *
   * @param id id 
   * @return List[Any]
   */
  def getTotalRevenuePerMonthUsingGET(id: Long): Option[List[Any]] = {
    val await = Try(Await.result(getTotalRevenuePerMonthUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getTotalRevenuePerMonth asynchronously
   * 
   *
   * @param id id 
   * @return Future(List[Any])
   */
  def getTotalRevenuePerMonthUsingGETAsync(id: Long): Future[List[Any]] = {
      helper.getTotalRevenuePerMonthUsingGET(id)
  }

}

class EndpointsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def authorizeUsingPUT(authorization: Authorization)(implicit reader: ClientResponseReader[Boolean], writer: RequestWriter[Authorization]): Future[Boolean] = {
    // create path and map variables
    val path = (addFmt("/api/authorize"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling EndpointsApi->authorizeUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(authorization))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deductUsingPUT(deduction: Deduction)(implicit reader: ClientResponseReader[DeductionResult], writer: RequestWriter[Deduction]): Future[DeductionResult] = {
    // create path and map variables
    val path = (addFmt("/api/deduct"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (deduction == null) throw new Exception("Missing required parameter 'deduction' when calling EndpointsApi->deductUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(deduction))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAuthorizedServicesUsingGET(secureId: String)(implicit reader: ClientResponseReader[AuthorizedServicesResponse]): Future[AuthorizedServicesResponse] = {
    // create path and map variables
    val path = (addFmt("/api/service/subscriber/{secureId}")
      replaceAll("\\{" + "secureId" + "\\}", secureId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (secureId == null) throw new Exception("Missing required parameter 'secureId' when calling EndpointsApi->getAuthorizedServicesUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChargingLogBySubscriptionUsingGET(id: Long)(implicit reader: ClientResponseReader[List[ChargingLog]]): Future[List[ChargingLog]] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs/subscription/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCustomerTotalAmountUsingGET(id: String)(implicit reader: ClientResponseReader[Long]): Future[Long] = {
    // create path and map variables
    val path = (addFmt("/api/customer-totalAmountCharge/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling EndpointsApi->getCustomerTotalAmountUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInvoiceDetailsUsingGET(invoiceRequest: InvoiceRequest)(implicit reader: ClientResponseReader[Any], writer: RequestWriter[InvoiceRequest]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/api/getInvoiceDetails"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (invoiceRequest == null) throw new Exception("Missing required parameter 'invoiceRequest' when calling EndpointsApi->getInvoiceDetailsUsingGET")

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, writer.write(invoiceRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getMessageTemplateUsingGET(lifecycleEventName: String)(implicit reader: ClientResponseReader[MessageTemplate]): Future[MessageTemplate] = {
    // create path and map variables
    val path = (addFmt("/api/message-templates/email/{lifecycleEventName}")
      replaceAll("\\{" + "lifecycleEventName" + "\\}", lifecycleEventName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (lifecycleEventName == null) throw new Exception("Missing required parameter 'lifecycleEventName' when calling EndpointsApi->getMessageTemplateUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getServiceInstancesBySubscriptionUsingGET(id: Long)(implicit reader: ClientResponseReader[List[ServiceInstanceResult]]): Future[List[ServiceInstanceResult]] = {
    // create path and map variables
    val path = (addFmt("/api/service-instances/subscription/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getServiceOfferingsBySubscriptionPlanUsingGET(id: Long)(implicit reader: ClientResponseReader[List[ServiceOfferingResult]]): Future[List[ServiceOfferingResult]] = {
    // create path and map variables
    val path = (addFmt("/api/service-offerings/offer/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getTotalRevenuePerMonthUsingGET(id: Long)(implicit reader: ClientResponseReader[List[Any]]): Future[List[Any]] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs-totalamount-customer/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
