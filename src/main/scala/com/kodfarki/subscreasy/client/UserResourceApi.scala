/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.ManagedUserVM
import com.kodfarki.subscreasy.client.model.ResponseEntity
import com.kodfarki.subscreasy.client.model.User
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class UserResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UserResourceApiAsyncHelper(client, config)

  /**
   * createUser
   * 
   *
   * @param managedUserVM managedUserVM 
   * @return ResponseEntity
   */
  def createUserUsingPOST(managedUserVM: ManagedUserVM): Option[ResponseEntity] = {
    val await = Try(Await.result(createUserUsingPOSTAsync(managedUserVM), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createUser asynchronously
   * 
   *
   * @param managedUserVM managedUserVM 
   * @return Future(ResponseEntity)
   */
  def createUserUsingPOSTAsync(managedUserVM: ManagedUserVM): Future[ResponseEntity] = {
      helper.createUserUsingPOST(managedUserVM)
  }

  /**
   * deleteUser
   * 
   *
   * @param login login 
   * @return void
   */
  def deleteUserUsingDELETE(login: String) = {
    val await = Try(Await.result(deleteUserUsingDELETEAsync(login), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deleteUser asynchronously
   * 
   *
   * @param login login 
   * @return Future(void)
   */
  def deleteUserUsingDELETEAsync(login: String) = {
      helper.deleteUserUsingDELETE(login)
  }

  /**
   * getAllUsers
   * 
   *
   * @param page Page number of the requested page (optional)
   * @param size Size of a page (optional)
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
   * @return List[User]
   */
  def getAllUsersUsingGET(page: Option[Integer] = None, size: Option[Integer] = None, sort: Option[List[String]] = None): Option[List[User]] = {
    val await = Try(Await.result(getAllUsersUsingGETAsync(page, size, sort), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllUsers asynchronously
   * 
   *
   * @param page Page number of the requested page (optional)
   * @param size Size of a page (optional)
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
   * @return Future(List[User])
   */
  def getAllUsersUsingGETAsync(page: Option[Integer] = None, size: Option[Integer] = None, sort: Option[List[String]] = None): Future[List[User]] = {
      helper.getAllUsersUsingGET(page, size, sort)
  }

  /**
   * getAuthorities
   * 
   *
   * @return List[String]
   */
  def getAuthoritiesUsingGET(): Option[List[String]] = {
    val await = Try(Await.result(getAuthoritiesUsingGETAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAuthorities asynchronously
   * 
   *
   * @return Future(List[String])
   */
  def getAuthoritiesUsingGETAsync(): Future[List[String]] = {
      helper.getAuthoritiesUsingGET()
  }

  /**
   * getUser
   * 
   *
   * @param login login 
   * @return User
   */
  def getUserUsingGET(login: String): Option[User] = {
    val await = Try(Await.result(getUserUsingGETAsync(login), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getUser asynchronously
   * 
   *
   * @param login login 
   * @return Future(User)
   */
  def getUserUsingGETAsync(login: String): Future[User] = {
      helper.getUserUsingGET(login)
  }

  /**
   * updateUser
   * 
   *
   * @param managedUserVM managedUserVM 
   * @return User
   */
  def updateUserUsingPUT(managedUserVM: ManagedUserVM): Option[User] = {
    val await = Try(Await.result(updateUserUsingPUTAsync(managedUserVM), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateUser asynchronously
   * 
   *
   * @param managedUserVM managedUserVM 
   * @return Future(User)
   */
  def updateUserUsingPUTAsync(managedUserVM: ManagedUserVM): Future[User] = {
      helper.updateUserUsingPUT(managedUserVM)
  }

}

class UserResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createUserUsingPOST(managedUserVM: ManagedUserVM)(implicit reader: ClientResponseReader[ResponseEntity], writer: RequestWriter[ManagedUserVM]): Future[ResponseEntity] = {
    // create path and map variables
    val path = (addFmt("/api/users"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (managedUserVM == null) throw new Exception("Missing required parameter 'managedUserVM' when calling UserResourceApi->createUserUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(managedUserVM))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteUserUsingDELETE(login: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/users/{login}")
      replaceAll("\\{" + "login" + "\\}", login.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (login == null) throw new Exception("Missing required parameter 'login' when calling UserResourceApi->deleteUserUsingDELETE")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllUsersUsingGET(page: Option[Integer] = None,
    size: Option[Integer] = None,
    sort: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[List[User]]): Future[List[User]] = {
    // create path and map variables
    val path = (addFmt("/api/users"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    sort match {
      case Some(param) => queryParams += "sort" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAuthoritiesUsingGET()(implicit reader: ClientResponseReader[List[String]]): Future[List[String]] = {
    // create path and map variables
    val path = (addFmt("/api/users/authorities"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserUsingGET(login: String)(implicit reader: ClientResponseReader[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/api/users/{login}")
      replaceAll("\\{" + "login" + "\\}", login.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (login == null) throw new Exception("Missing required parameter 'login' when calling UserResourceApi->getUserUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateUserUsingPUT(managedUserVM: ManagedUserVM)(implicit reader: ClientResponseReader[User], writer: RequestWriter[ManagedUserVM]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/api/users"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (managedUserVM == null) throw new Exception("Missing required parameter 'managedUserVM' when calling UserResourceApi->updateUserUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(managedUserVM))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
