/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.CompanyProps
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class CompanyPropsResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new CompanyPropsResourceApiAsyncHelper(client, config)

  /**
   * createCompanyProps
   * 
   *
   * @param companyProps companyProps 
   * @return CompanyProps
   */
  def createCompanyPropsUsingPOST(companyProps: CompanyProps): Option[CompanyProps] = {
    val await = Try(Await.result(createCompanyPropsUsingPOSTAsync(companyProps), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createCompanyProps asynchronously
   * 
   *
   * @param companyProps companyProps 
   * @return Future(CompanyProps)
   */
  def createCompanyPropsUsingPOSTAsync(companyProps: CompanyProps): Future[CompanyProps] = {
      helper.createCompanyPropsUsingPOST(companyProps)
  }

  /**
   * deleteCompanyProps
   * 
   *
   * @param id id 
   * @return void
   */
  def deleteCompanyPropsUsingDELETE(id: Long) = {
    val await = Try(Await.result(deleteCompanyPropsUsingDELETEAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deleteCompanyProps asynchronously
   * 
   *
   * @param id id 
   * @return Future(void)
   */
  def deleteCompanyPropsUsingDELETEAsync(id: Long) = {
      helper.deleteCompanyPropsUsingDELETE(id)
  }

  /**
   * getAllCompanyProps
   * 
   *
   * @return List[CompanyProps]
   */
  def getAllCompanyPropsUsingGET(): Option[List[CompanyProps]] = {
    val await = Try(Await.result(getAllCompanyPropsUsingGETAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllCompanyProps asynchronously
   * 
   *
   * @return Future(List[CompanyProps])
   */
  def getAllCompanyPropsUsingGETAsync(): Future[List[CompanyProps]] = {
      helper.getAllCompanyPropsUsingGET()
  }

  /**
   * getCompanyPropsByCompanyId
   * 
   *
   * @param companyId companyId 
   * @return CompanyProps
   */
  def getCompanyPropsByCompanyIdUsingGET(companyId: Long): Option[CompanyProps] = {
    val await = Try(Await.result(getCompanyPropsByCompanyIdUsingGETAsync(companyId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getCompanyPropsByCompanyId asynchronously
   * 
   *
   * @param companyId companyId 
   * @return Future(CompanyProps)
   */
  def getCompanyPropsByCompanyIdUsingGETAsync(companyId: Long): Future[CompanyProps] = {
      helper.getCompanyPropsByCompanyIdUsingGET(companyId)
  }

  /**
   * updateCompanyProps
   * 
   *
   * @param companyProps companyProps 
   * @return CompanyProps
   */
  def updateCompanyPropsUsingPUT(companyProps: CompanyProps): Option[CompanyProps] = {
    val await = Try(Await.result(updateCompanyPropsUsingPUTAsync(companyProps), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateCompanyProps asynchronously
   * 
   *
   * @param companyProps companyProps 
   * @return Future(CompanyProps)
   */
  def updateCompanyPropsUsingPUTAsync(companyProps: CompanyProps): Future[CompanyProps] = {
      helper.updateCompanyPropsUsingPUT(companyProps)
  }

}

class CompanyPropsResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createCompanyPropsUsingPOST(companyProps: CompanyProps)(implicit reader: ClientResponseReader[CompanyProps], writer: RequestWriter[CompanyProps]): Future[CompanyProps] = {
    // create path and map variables
    val path = (addFmt("/api/company-props"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (companyProps == null) throw new Exception("Missing required parameter 'companyProps' when calling CompanyPropsResourceApi->createCompanyPropsUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(companyProps))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteCompanyPropsUsingDELETE(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/company-props/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllCompanyPropsUsingGET()(implicit reader: ClientResponseReader[List[CompanyProps]]): Future[List[CompanyProps]] = {
    // create path and map variables
    val path = (addFmt("/api/company-props"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCompanyPropsByCompanyIdUsingGET(companyId: Long)(implicit reader: ClientResponseReader[CompanyProps]): Future[CompanyProps] = {
    // create path and map variables
    val path = (addFmt("/api/company-props/company/{companyId}")
      replaceAll("\\{" + "companyId" + "\\}", companyId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateCompanyPropsUsingPUT(companyProps: CompanyProps)(implicit reader: ClientResponseReader[CompanyProps], writer: RequestWriter[CompanyProps]): Future[CompanyProps] = {
    // create path and map variables
    val path = (addFmt("/api/company-props"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (companyProps == null) throw new Exception("Missing required parameter 'companyProps' when calling CompanyPropsResourceApi->updateCompanyPropsUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(companyProps))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
