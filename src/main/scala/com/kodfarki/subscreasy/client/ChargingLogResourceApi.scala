/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.ChargingLog
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ChargingLogResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ChargingLogResourceApiAsyncHelper(client, config)

  /**
   * createChargingLog
   * 
   *
   * @param chargingLog chargingLog 
   * @return ChargingLog
   */
  def createChargingLogUsingPOST(chargingLog: ChargingLog): Option[ChargingLog] = {
    val await = Try(Await.result(createChargingLogUsingPOSTAsync(chargingLog), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createChargingLog asynchronously
   * 
   *
   * @param chargingLog chargingLog 
   * @return Future(ChargingLog)
   */
  def createChargingLogUsingPOSTAsync(chargingLog: ChargingLog): Future[ChargingLog] = {
      helper.createChargingLogUsingPOST(chargingLog)
  }

  /**
   * deleteChargingLog
   * 
   *
   * @param id id 
   * @return void
   */
  def deleteChargingLogUsingDELETE(id: Long) = {
    val await = Try(Await.result(deleteChargingLogUsingDELETEAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deleteChargingLog asynchronously
   * 
   *
   * @param id id 
   * @return Future(void)
   */
  def deleteChargingLogUsingDELETEAsync(id: Long) = {
      helper.deleteChargingLogUsingDELETE(id)
  }

  /**
   * getAllChargingLogs
   * 
   *
   * @param page Page number of the requested page (optional)
   * @param size Size of a page (optional)
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
   * @return List[ChargingLog]
   */
  def getAllChargingLogsUsingGET(page: Option[Integer] = None, size: Option[Integer] = None, sort: Option[List[String]] = None): Option[List[ChargingLog]] = {
    val await = Try(Await.result(getAllChargingLogsUsingGETAsync(page, size, sort), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllChargingLogs asynchronously
   * 
   *
   * @param page Page number of the requested page (optional)
   * @param size Size of a page (optional)
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
   * @return Future(List[ChargingLog])
   */
  def getAllChargingLogsUsingGETAsync(page: Option[Integer] = None, size: Option[Integer] = None, sort: Option[List[String]] = None): Future[List[ChargingLog]] = {
      helper.getAllChargingLogsUsingGET(page, size, sort)
  }

  /**
   * getChargingLog
   * 
   *
   * @param id id 
   * @return ChargingLog
   */
  def getChargingLogUsingGET(id: Long): Option[ChargingLog] = {
    val await = Try(Await.result(getChargingLogUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getChargingLog asynchronously
   * 
   *
   * @param id id 
   * @return Future(ChargingLog)
   */
  def getChargingLogUsingGETAsync(id: Long): Future[ChargingLog] = {
      helper.getChargingLogUsingGET(id)
  }

  /**
   * getUnpaidChargingLogs
   * 
   *
   * @param page Page number of the requested page (optional)
   * @param size Size of a page (optional)
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
   * @return List[ChargingLog]
   */
  def getUnpaidChargingLogsUsingGET(page: Option[Integer] = None, size: Option[Integer] = None, sort: Option[List[String]] = None): Option[List[ChargingLog]] = {
    val await = Try(Await.result(getUnpaidChargingLogsUsingGETAsync(page, size, sort), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getUnpaidChargingLogs asynchronously
   * 
   *
   * @param page Page number of the requested page (optional)
   * @param size Size of a page (optional)
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
   * @return Future(List[ChargingLog])
   */
  def getUnpaidChargingLogsUsingGETAsync(page: Option[Integer] = None, size: Option[Integer] = None, sort: Option[List[String]] = None): Future[List[ChargingLog]] = {
      helper.getUnpaidChargingLogsUsingGET(page, size, sort)
  }

  /**
   * refund
   * 
   *
   * @param chargingLogId chargingLogId 
   * @return ChargingLog
   */
  def refundUsingPOST(chargingLogId: Long): Option[ChargingLog] = {
    val await = Try(Await.result(refundUsingPOSTAsync(chargingLogId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * refund asynchronously
   * 
   *
   * @param chargingLogId chargingLogId 
   * @return Future(ChargingLog)
   */
  def refundUsingPOSTAsync(chargingLogId: Long): Future[ChargingLog] = {
      helper.refundUsingPOST(chargingLogId)
  }

  /**
   * updateChargingLog
   * 
   *
   * @param chargingLog chargingLog 
   * @return ChargingLog
   */
  def updateChargingLogUsingPUT(chargingLog: ChargingLog): Option[ChargingLog] = {
    val await = Try(Await.result(updateChargingLogUsingPUTAsync(chargingLog), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateChargingLog asynchronously
   * 
   *
   * @param chargingLog chargingLog 
   * @return Future(ChargingLog)
   */
  def updateChargingLogUsingPUTAsync(chargingLog: ChargingLog): Future[ChargingLog] = {
      helper.updateChargingLogUsingPUT(chargingLog)
  }

}

class ChargingLogResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createChargingLogUsingPOST(chargingLog: ChargingLog)(implicit reader: ClientResponseReader[ChargingLog], writer: RequestWriter[ChargingLog]): Future[ChargingLog] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (chargingLog == null) throw new Exception("Missing required parameter 'chargingLog' when calling ChargingLogResourceApi->createChargingLogUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(chargingLog))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteChargingLogUsingDELETE(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllChargingLogsUsingGET(page: Option[Integer] = None,
    size: Option[Integer] = None,
    sort: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[List[ChargingLog]]): Future[List[ChargingLog]] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    sort match {
      case Some(param) => queryParams += "sort" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChargingLogUsingGET(id: Long)(implicit reader: ClientResponseReader[ChargingLog]): Future[ChargingLog] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUnpaidChargingLogsUsingGET(page: Option[Integer] = None,
    size: Option[Integer] = None,
    sort: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[List[ChargingLog]]): Future[List[ChargingLog]] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs/unpaid"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    sort match {
      case Some(param) => queryParams += "sort" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def refundUsingPOST(chargingLogId: Long)(implicit reader: ClientResponseReader[ChargingLog]): Future[ChargingLog] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs/refund/{chargingLogId}")
      replaceAll("\\{" + "chargingLogId" + "\\}", chargingLogId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateChargingLogUsingPUT(chargingLog: ChargingLog)(implicit reader: ClientResponseReader[ChargingLog], writer: RequestWriter[ChargingLog]): Future[ChargingLog] = {
    // create path and map variables
    val path = (addFmt("/api/charging-logs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (chargingLog == null) throw new Exception("Missing required parameter 'chargingLog' when calling ChargingLogResourceApi->updateChargingLogUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(chargingLog))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
