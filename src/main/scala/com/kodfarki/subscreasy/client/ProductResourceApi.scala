/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.Product
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ProductResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ProductResourceApiAsyncHelper(client, config)

  /**
   * createProduct
   * 
   *
   * @param product product 
   * @return Product
   */
  def createProductUsingPOST(product: Product): Option[Product] = {
    val await = Try(Await.result(createProductUsingPOSTAsync(product), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createProduct asynchronously
   * 
   *
   * @param product product 
   * @return Future(Product)
   */
  def createProductUsingPOSTAsync(product: Product): Future[Product] = {
      helper.createProductUsingPOST(product)
  }

  /**
   * getAllCompanyProduct
   * 
   *
   * @param companyName companyName 
   * @return List[Product]
   */
  def getAllCompanyProductUsingGET(companyName: String): Option[List[Product]] = {
    val await = Try(Await.result(getAllCompanyProductUsingGETAsync(companyName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllCompanyProduct asynchronously
   * 
   *
   * @param companyName companyName 
   * @return Future(List[Product])
   */
  def getAllCompanyProductUsingGETAsync(companyName: String): Future[List[Product]] = {
      helper.getAllCompanyProductUsingGET(companyName)
  }

  /**
   * getAllProducts
   * 
   *
   * @return List[Product]
   */
  def getAllProductsUsingGET(): Option[List[Product]] = {
    val await = Try(Await.result(getAllProductsUsingGETAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllProducts asynchronously
   * 
   *
   * @return Future(List[Product])
   */
  def getAllProductsUsingGETAsync(): Future[List[Product]] = {
      helper.getAllProductsUsingGET()
  }

  /**
   * getCompanyProduct
   * 
   *
   * @param companyName companyName 
   * @param id id 
   * @return Product
   */
  def getCompanyProductUsingGET(companyName: String, id: Long): Option[Product] = {
    val await = Try(Await.result(getCompanyProductUsingGETAsync(companyName, id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getCompanyProduct asynchronously
   * 
   *
   * @param companyName companyName 
   * @param id id 
   * @return Future(Product)
   */
  def getCompanyProductUsingGETAsync(companyName: String, id: Long): Future[Product] = {
      helper.getCompanyProductUsingGET(companyName, id)
  }

  /**
   * getProduct
   * 
   *
   * @param id id 
   * @return Product
   */
  def getProductUsingGET(id: Long): Option[Product] = {
    val await = Try(Await.result(getProductUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getProduct asynchronously
   * 
   *
   * @param id id 
   * @return Future(Product)
   */
  def getProductUsingGETAsync(id: Long): Future[Product] = {
      helper.getProductUsingGET(id)
  }

  /**
   * updateProduct
   * 
   *
   * @param product product 
   * @return Product
   */
  def updateProductUsingPUT(product: Product): Option[Product] = {
    val await = Try(Await.result(updateProductUsingPUTAsync(product), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateProduct asynchronously
   * 
   *
   * @param product product 
   * @return Future(Product)
   */
  def updateProductUsingPUTAsync(product: Product): Future[Product] = {
      helper.updateProductUsingPUT(product)
  }

}

class ProductResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createProductUsingPOST(product: Product)(implicit reader: ClientResponseReader[Product], writer: RequestWriter[Product]): Future[Product] = {
    // create path and map variables
    val path = (addFmt("/api/products"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (product == null) throw new Exception("Missing required parameter 'product' when calling ProductResourceApi->createProductUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(product))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllCompanyProductUsingGET(companyName: String)(implicit reader: ClientResponseReader[List[Product]]): Future[List[Product]] = {
    // create path and map variables
    val path = (addFmt("/api/na/products2/{companyName}")
      replaceAll("\\{" + "companyName" + "\\}", companyName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (companyName == null) throw new Exception("Missing required parameter 'companyName' when calling ProductResourceApi->getAllCompanyProductUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllProductsUsingGET()(implicit reader: ClientResponseReader[List[Product]]): Future[List[Product]] = {
    // create path and map variables
    val path = (addFmt("/api/products"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCompanyProductUsingGET(companyName: String,
    id: Long)(implicit reader: ClientResponseReader[Product]): Future[Product] = {
    // create path and map variables
    val path = (addFmt("/api/na/products/{companyName}/{id}")
      replaceAll("\\{" + "companyName" + "\\}", companyName.toString)
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (companyName == null) throw new Exception("Missing required parameter 'companyName' when calling ProductResourceApi->getCompanyProductUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getProductUsingGET(id: Long)(implicit reader: ClientResponseReader[Product]): Future[Product] = {
    // create path and map variables
    val path = (addFmt("/api/products/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateProductUsingPUT(product: Product)(implicit reader: ClientResponseReader[Product], writer: RequestWriter[Product]): Future[Product] = {
    // create path and map variables
    val path = (addFmt("/api/products"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (product == null) throw new Exception("Missing required parameter 'product' when calling ProductResourceApi->updateProductUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(product))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
