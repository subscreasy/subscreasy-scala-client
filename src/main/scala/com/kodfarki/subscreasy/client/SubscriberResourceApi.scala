/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.Subscriber
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class SubscriberResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SubscriberResourceApiAsyncHelper(client, config)

  /**
   * createSubscriber
   * 
   *
   * @param subscriber subscriber 
   * @return Subscriber
   */
  def createSubscriberUsingPOST(subscriber: Subscriber): Option[Subscriber] = {
    val await = Try(Await.result(createSubscriberUsingPOSTAsync(subscriber), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createSubscriber asynchronously
   * 
   *
   * @param subscriber subscriber 
   * @return Future(Subscriber)
   */
  def createSubscriberUsingPOSTAsync(subscriber: Subscriber): Future[Subscriber] = {
      helper.createSubscriberUsingPOST(subscriber)
  }

  /**
   * deleteSubscriber
   * 
   *
   * @param id id 
   * @return void
   */
  def deleteSubscriberUsingDELETE(id: Long) = {
    val await = Try(Await.result(deleteSubscriberUsingDELETEAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deleteSubscriber asynchronously
   * 
   *
   * @param id id 
   * @return Future(void)
   */
  def deleteSubscriberUsingDELETEAsync(id: Long) = {
      helper.deleteSubscriberUsingDELETE(id)
  }

  /**
   * getAllSubscribers
   * 
   *
   * @return List[Subscriber]
   */
  def getAllSubscribersUsingGET(): Option[List[Subscriber]] = {
    val await = Try(Await.result(getAllSubscribersUsingGETAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllSubscribers asynchronously
   * 
   *
   * @return Future(List[Subscriber])
   */
  def getAllSubscribersUsingGETAsync(): Future[List[Subscriber]] = {
      helper.getAllSubscribersUsingGET()
  }

  /**
   * getSubscriberByEmail
   * 
   *
   * @param email email 
   * @return List[Subscriber]
   */
  def getSubscriberByEmailUsingGET(email: String): Option[List[Subscriber]] = {
    val await = Try(Await.result(getSubscriberByEmailUsingGETAsync(email), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getSubscriberByEmail asynchronously
   * 
   *
   * @param email email 
   * @return Future(List[Subscriber])
   */
  def getSubscriberByEmailUsingGETAsync(email: String): Future[List[Subscriber]] = {
      helper.getSubscriberByEmailUsingGET(email)
  }

  /**
   * getSubscriberByName
   * 
   *
   * @param name name 
   * @return List[Subscriber]
   */
  def getSubscriberByNameUsingGET(name: String): Option[List[Subscriber]] = {
    val await = Try(Await.result(getSubscriberByNameUsingGETAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getSubscriberByName asynchronously
   * 
   *
   * @param name name 
   * @return Future(List[Subscriber])
   */
  def getSubscriberByNameUsingGETAsync(name: String): Future[List[Subscriber]] = {
      helper.getSubscriberByNameUsingGET(name)
  }

  /**
   * getSubscriber
   * 
   *
   * @param id id 
   * @return Subscriber
   */
  def getSubscriberUsingGET(id: Long): Option[Subscriber] = {
    val await = Try(Await.result(getSubscriberUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getSubscriber asynchronously
   * 
   *
   * @param id id 
   * @return Future(Subscriber)
   */
  def getSubscriberUsingGETAsync(id: Long): Future[Subscriber] = {
      helper.getSubscriberUsingGET(id)
  }

  /**
   * updateSubscriber
   * 
   *
   * @param subscriber subscriber 
   * @return Subscriber
   */
  def updateSubscriberUsingPUT(subscriber: Subscriber): Option[Subscriber] = {
    val await = Try(Await.result(updateSubscriberUsingPUTAsync(subscriber), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateSubscriber asynchronously
   * 
   *
   * @param subscriber subscriber 
   * @return Future(Subscriber)
   */
  def updateSubscriberUsingPUTAsync(subscriber: Subscriber): Future[Subscriber] = {
      helper.updateSubscriberUsingPUT(subscriber)
  }

}

class SubscriberResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createSubscriberUsingPOST(subscriber: Subscriber)(implicit reader: ClientResponseReader[Subscriber], writer: RequestWriter[Subscriber]): Future[Subscriber] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (subscriber == null) throw new Exception("Missing required parameter 'subscriber' when calling SubscriberResourceApi->createSubscriberUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(subscriber))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteSubscriberUsingDELETE(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllSubscribersUsingGET()(implicit reader: ClientResponseReader[List[Subscriber]]): Future[List[Subscriber]] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubscriberByEmailUsingGET(email: String)(implicit reader: ClientResponseReader[List[Subscriber]]): Future[List[Subscriber]] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers/email/{email}")
      replaceAll("\\{" + "email" + "\\}", email.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling SubscriberResourceApi->getSubscriberByEmailUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubscriberByNameUsingGET(name: String)(implicit reader: ClientResponseReader[List[Subscriber]]): Future[List[Subscriber]] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling SubscriberResourceApi->getSubscriberByNameUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubscriberUsingGET(id: Long)(implicit reader: ClientResponseReader[Subscriber]): Future[Subscriber] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateSubscriberUsingPUT(subscriber: Subscriber)(implicit reader: ClientResponseReader[Subscriber], writer: RequestWriter[Subscriber]): Future[Subscriber] = {
    // create path and map variables
    val path = (addFmt("/api/subscribers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (subscriber == null) throw new Exception("Missing required parameter 'subscriber' when calling SubscriberResourceApi->updateSubscriberUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(subscriber))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
