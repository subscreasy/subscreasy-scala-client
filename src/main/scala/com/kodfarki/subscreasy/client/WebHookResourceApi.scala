/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.WebHook
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class WebHookResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new WebHookResourceApiAsyncHelper(client, config)

  /**
   * createWebHook
   * 
   *
   * @param webHook webHook 
   * @return WebHook
   */
  def createWebHookUsingPOST(webHook: WebHook): Option[WebHook] = {
    val await = Try(Await.result(createWebHookUsingPOSTAsync(webHook), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createWebHook asynchronously
   * 
   *
   * @param webHook webHook 
   * @return Future(WebHook)
   */
  def createWebHookUsingPOSTAsync(webHook: WebHook): Future[WebHook] = {
      helper.createWebHookUsingPOST(webHook)
  }

  /**
   * deleteWebHook
   * 
   *
   * @param id id 
   * @return void
   */
  def deleteWebHookUsingDELETE(id: Long) = {
    val await = Try(Await.result(deleteWebHookUsingDELETEAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deleteWebHook asynchronously
   * 
   *
   * @param id id 
   * @return Future(void)
   */
  def deleteWebHookUsingDELETEAsync(id: Long) = {
      helper.deleteWebHookUsingDELETE(id)
  }

  /**
   * getAllWebHooks
   * 
   *
   * @return List[WebHook]
   */
  def getAllWebHooksUsingGET(): Option[List[WebHook]] = {
    val await = Try(Await.result(getAllWebHooksUsingGETAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllWebHooks asynchronously
   * 
   *
   * @return Future(List[WebHook])
   */
  def getAllWebHooksUsingGETAsync(): Future[List[WebHook]] = {
      helper.getAllWebHooksUsingGET()
  }

  /**
   * getWebHook
   * 
   *
   * @param id id 
   * @return WebHook
   */
  def getWebHookUsingGET(id: Long): Option[WebHook] = {
    val await = Try(Await.result(getWebHookUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getWebHook asynchronously
   * 
   *
   * @param id id 
   * @return Future(WebHook)
   */
  def getWebHookUsingGETAsync(id: Long): Future[WebHook] = {
      helper.getWebHookUsingGET(id)
  }

  /**
   * updateWebHook
   * 
   *
   * @param webHook webHook 
   * @return WebHook
   */
  def updateWebHookUsingPUT(webHook: WebHook): Option[WebHook] = {
    val await = Try(Await.result(updateWebHookUsingPUTAsync(webHook), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateWebHook asynchronously
   * 
   *
   * @param webHook webHook 
   * @return Future(WebHook)
   */
  def updateWebHookUsingPUTAsync(webHook: WebHook): Future[WebHook] = {
      helper.updateWebHookUsingPUT(webHook)
  }

}

class WebHookResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createWebHookUsingPOST(webHook: WebHook)(implicit reader: ClientResponseReader[WebHook], writer: RequestWriter[WebHook]): Future[WebHook] = {
    // create path and map variables
    val path = (addFmt("/api/web-hooks"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (webHook == null) throw new Exception("Missing required parameter 'webHook' when calling WebHookResourceApi->createWebHookUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(webHook))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteWebHookUsingDELETE(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/web-hooks/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllWebHooksUsingGET()(implicit reader: ClientResponseReader[List[WebHook]]): Future[List[WebHook]] = {
    // create path and map variables
    val path = (addFmt("/api/web-hooks"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getWebHookUsingGET(id: Long)(implicit reader: ClientResponseReader[WebHook]): Future[WebHook] = {
    // create path and map variables
    val path = (addFmt("/api/web-hooks/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateWebHookUsingPUT(webHook: WebHook)(implicit reader: ClientResponseReader[WebHook], writer: RequestWriter[WebHook]): Future[WebHook] = {
    // create path and map variables
    val path = (addFmt("/api/web-hooks"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (webHook == null) throw new Exception("Missing required parameter 'webHook' when calling WebHookResourceApi->updateWebHookUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(webHook))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
