/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kodfarki.subscreasy.client

import java.text.SimpleDateFormat

import com.kodfarki.subscreasy.client.model.Invoice
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class InvoiceResourceApi(
  val defBasePath: String = "https://localhost:8080",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new InvoiceResourceApiAsyncHelper(client, config)

  /**
   * createInvoice
   * 
   *
   * @param invoice invoice 
   * @return Invoice
   */
  def createInvoiceUsingPOST(invoice: Invoice): Option[Invoice] = {
    val await = Try(Await.result(createInvoiceUsingPOSTAsync(invoice), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * createInvoice asynchronously
   * 
   *
   * @param invoice invoice 
   * @return Future(Invoice)
   */
  def createInvoiceUsingPOSTAsync(invoice: Invoice): Future[Invoice] = {
      helper.createInvoiceUsingPOST(invoice)
  }

  /**
   * deleteInvoice
   * 
   *
   * @param id id 
   * @return void
   */
  def deleteInvoiceUsingDELETE(id: Long) = {
    val await = Try(Await.result(deleteInvoiceUsingDELETEAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * deleteInvoice asynchronously
   * 
   *
   * @param id id 
   * @return Future(void)
   */
  def deleteInvoiceUsingDELETEAsync(id: Long) = {
      helper.deleteInvoiceUsingDELETE(id)
  }

  /**
   * getAllInvoices
   * 
   *
   * @return List[Invoice]
   */
  def getAllInvoicesUsingGET(): Option[List[Invoice]] = {
    val await = Try(Await.result(getAllInvoicesUsingGETAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getAllInvoices asynchronously
   * 
   *
   * @return Future(List[Invoice])
   */
  def getAllInvoicesUsingGETAsync(): Future[List[Invoice]] = {
      helper.getAllInvoicesUsingGET()
  }

  /**
   * getInvoiceBySubscriber
   * 
   *
   * @param subscriberSecureId subscriberSecureId 
   * @return List[Invoice]
   */
  def getInvoiceBySubscriberUsingGET(subscriberSecureId: String): Option[List[Invoice]] = {
    val await = Try(Await.result(getInvoiceBySubscriberUsingGETAsync(subscriberSecureId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getInvoiceBySubscriber asynchronously
   * 
   *
   * @param subscriberSecureId subscriberSecureId 
   * @return Future(List[Invoice])
   */
  def getInvoiceBySubscriberUsingGETAsync(subscriberSecureId: String): Future[List[Invoice]] = {
      helper.getInvoiceBySubscriberUsingGET(subscriberSecureId)
  }

  /**
   * getInvoice
   * 
   *
   * @param id id 
   * @return Invoice
   */
  def getInvoiceUsingGET(id: Long): Option[Invoice] = {
    val await = Try(Await.result(getInvoiceUsingGETAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * getInvoice asynchronously
   * 
   *
   * @param id id 
   * @return Future(Invoice)
   */
  def getInvoiceUsingGETAsync(id: Long): Future[Invoice] = {
      helper.getInvoiceUsingGET(id)
  }

  /**
   * updateInvoice
   * 
   *
   * @param invoice invoice 
   * @return Invoice
   */
  def updateInvoiceUsingPUT(invoice: Invoice): Option[Invoice] = {
    val await = Try(Await.result(updateInvoiceUsingPUTAsync(invoice), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * updateInvoice asynchronously
   * 
   *
   * @param invoice invoice 
   * @return Future(Invoice)
   */
  def updateInvoiceUsingPUTAsync(invoice: Invoice): Future[Invoice] = {
      helper.updateInvoiceUsingPUT(invoice)
  }

}

class InvoiceResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createInvoiceUsingPOST(invoice: Invoice)(implicit reader: ClientResponseReader[Invoice], writer: RequestWriter[Invoice]): Future[Invoice] = {
    // create path and map variables
    val path = (addFmt("/api/invoices"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (invoice == null) throw new Exception("Missing required parameter 'invoice' when calling InvoiceResourceApi->createInvoiceUsingPOST")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(invoice))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteInvoiceUsingDELETE(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/api/invoices/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllInvoicesUsingGET()(implicit reader: ClientResponseReader[List[Invoice]]): Future[List[Invoice]] = {
    // create path and map variables
    val path = (addFmt("/api/invoices"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInvoiceBySubscriberUsingGET(subscriberSecureId: String)(implicit reader: ClientResponseReader[List[Invoice]]): Future[List[Invoice]] = {
    // create path and map variables
    val path = (addFmt("/api/invoices/subscriber/{subscriberSecureId}")
      replaceAll("\\{" + "subscriberSecureId" + "\\}", subscriberSecureId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (subscriberSecureId == null) throw new Exception("Missing required parameter 'subscriberSecureId' when calling InvoiceResourceApi->getInvoiceBySubscriberUsingGET")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInvoiceUsingGET(id: Long)(implicit reader: ClientResponseReader[Invoice]): Future[Invoice] = {
    // create path and map variables
    val path = (addFmt("/api/invoices/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateInvoiceUsingPUT(invoice: Invoice)(implicit reader: ClientResponseReader[Invoice], writer: RequestWriter[Invoice]): Future[Invoice] = {
    // create path and map variables
    val path = (addFmt("/api/invoices"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (invoice == null) throw new Exception("Missing required parameter 'invoice' when calling InvoiceResourceApi->updateInvoiceUsingPUT")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(invoice))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
